Visual studio에서 SFML 개발 환경 세팅

구성 : 디버그
플래폼 : Win32

C/C++ : 추가 포함 디렉토리 : include까지 추가

링커/입력 : 추가 종속성에
sfml-window-s-d.lib
sfml-system-s-d.lib
sfml-graphics-s-d.lib
opengl32.lib
freetype.lib
winmm.lib
gdi32.lib
추가

링커/일반/추가라이브러리디렉터리 : SFML의 lib 폴더까지 들어가서 추가

C/C++/전처리기 : 전처리기 정의 : SFML_STATIC 추가

=======================================================================


Graphics.cpp를 include하면 많은 헤더파일이 include되도록 묶어놓음

.cpp 파일 -> (compile) -> bin 파일로 된다.
bin파일을 묶어놓은 것이 .lib 

따라서 프로젝트를 시작할 때,

    include 폴더와 lib 폴더가 필요하다

    include 폴더 : 클래스, function declaration 모음
                클래스 definition 모음

    lib 폴더 : 클래스, 함수 구현 소스코드의 컴파일 결과물
            바이너리 코드를 한 곳에 묶어 놓은 것.
            --> 내가 작성한 코드와 묶는 과정을 link

            link => .exe 생성

// SLL : Statically linked Library  
    -> a program에 SFML library를 갖고 있고, b program에 SFML library를 갖고 있다.
       컴맹한테 프로그램을 줄 때 한꺼번에 프로그램을 주면 된다
    -> 장점 : DLL에 대한 의존성이 없기 때문에 버전문제가 없다. 
    -> 단점 : 메모리 낭비, 업데이트 어려움
// DLL : Dynamically linked Library 
    -> a program에서 SFML library를 가리키고(link), b program에서 SFML library를 가리킨다.
       컴퓨터를 잘 아는 친구에게 프로그램을 줄 때 프로그램과 dll을 따로 주면 된다
    -> 메모리 낭비 해결, 업데이트는 진짜 SFML library 하나만 하면 된다

DLL은 bin폴더에 있다.


  